'------------------------------------------------------------------------------
' <auto-generated>
'     このコードはツールによって生成されました。
'     ランタイム バージョン:4.0.30319.42000
'
'     このファイルへの変更は、以下の状況下で不正な動作の原因になったり、
'     コードが再生成されるときに損失したりします。
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'このソース コードは Microsoft.VSDesigner、バージョン 4.0.30319.42000 によって自動生成されました。
'
Namespace is2init
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="Service1Soap", [Namespace]:="http://Walkthrough/XmlWebServices/")>  _
    Partial Public Class Service1
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private Set_tanmatsuOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Upd_tanmatsuOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Upd_riyouOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Get_tanmatsu2OperationCompleted As System.Threading.SendOrPostCallback
        
        Private Get_tanmatsu3OperationCompleted As System.Threading.SendOrPostCallback
        
        Private Get_riyouOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Get_seikyuOperationCompleted As System.Threading.SendOrPostCallback
        
        Private loginOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Get_jyotaiOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Get_syukabiOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Get_bumonOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Get_messageOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Get_seigyoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Get_seigyo2OperationCompleted As System.Threading.SendOrPostCallback
        
        Private Ins_seigyoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Upd_seigyoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private login2OperationCompleted As System.Threading.SendOrPostCallback
        
        Private Upd_tanmatuOperationCompleted As System.Threading.SendOrPostCallback
        
        Private login3OperationCompleted As System.Threading.SendOrPostCallback
        
        Private Get_hatuten3OperationCompleted As System.Threading.SendOrPostCallback
        
        Private Get_KadobiOperationCompleted As System.Threading.SendOrPostCallback
        
        Private wakeupDBOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = "http://wwwis2.fukutsu.co.jp/is2/is2init/Service1.asmx"
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event Set_tanmatsuCompleted As Set_tanmatsuCompletedEventHandler
        
        '''<remarks/>
        Public Event Upd_tanmatsuCompleted As Upd_tanmatsuCompletedEventHandler
        
        '''<remarks/>
        Public Event Upd_riyouCompleted As Upd_riyouCompletedEventHandler
        
        '''<remarks/>
        Public Event Get_tanmatsu2Completed As Get_tanmatsu2CompletedEventHandler
        
        '''<remarks/>
        Public Event Get_tanmatsu3Completed As Get_tanmatsu3CompletedEventHandler
        
        '''<remarks/>
        Public Event Get_riyouCompleted As Get_riyouCompletedEventHandler
        
        '''<remarks/>
        Public Event Get_seikyuCompleted As Get_seikyuCompletedEventHandler
        
        '''<remarks/>
        Public Event loginCompleted As loginCompletedEventHandler
        
        '''<remarks/>
        Public Event Get_jyotaiCompleted As Get_jyotaiCompletedEventHandler
        
        '''<remarks/>
        Public Event Get_syukabiCompleted As Get_syukabiCompletedEventHandler
        
        '''<remarks/>
        Public Event Get_bumonCompleted As Get_bumonCompletedEventHandler
        
        '''<remarks/>
        Public Event Get_messageCompleted As Get_messageCompletedEventHandler
        
        '''<remarks/>
        Public Event Get_seigyoCompleted As Get_seigyoCompletedEventHandler
        
        '''<remarks/>
        Public Event Get_seigyo2Completed As Get_seigyo2CompletedEventHandler
        
        '''<remarks/>
        Public Event Ins_seigyoCompleted As Ins_seigyoCompletedEventHandler
        
        '''<remarks/>
        Public Event Upd_seigyoCompleted As Upd_seigyoCompletedEventHandler
        
        '''<remarks/>
        Public Event login2Completed As login2CompletedEventHandler
        
        '''<remarks/>
        Public Event Upd_tanmatuCompleted As Upd_tanmatuCompletedEventHandler
        
        '''<remarks/>
        Public Event login3Completed As login3CompletedEventHandler
        
        '''<remarks/>
        Public Event Get_hatuten3Completed As Get_hatuten3CompletedEventHandler
        
        '''<remarks/>
        Public Event Get_KadobiCompleted As Get_KadobiCompletedEventHandler
        
        '''<remarks/>
        Public Event wakeupDBCompleted As wakeupDBCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Walkthrough/XmlWebServices/Set_tanmatsu", RequestNamespace:="http://Walkthrough/XmlWebServices/", ResponseNamespace:="http://Walkthrough/XmlWebServices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Set_tanmatsu(ByVal sUser() As String, ByVal sKey() As String) As String()
            Dim results() As Object = Me.Invoke("Set_tanmatsu", New Object() {sUser, sKey})
            Return CType(results(0),String())
        End Function
        
        '''<remarks/>
        Public Function BeginSet_tanmatsu(ByVal sUser() As String, ByVal sKey() As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("Set_tanmatsu", New Object() {sUser, sKey}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndSet_tanmatsu(ByVal asyncResult As System.IAsyncResult) As String()
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String())
        End Function
        
        '''<remarks/>
        Public Overloads Sub Set_tanmatsuAsync(ByVal sUser() As String, ByVal sKey() As String)
            Me.Set_tanmatsuAsync(sUser, sKey, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Set_tanmatsuAsync(ByVal sUser() As String, ByVal sKey() As String, ByVal userState As Object)
            If (Me.Set_tanmatsuOperationCompleted Is Nothing) Then
                Me.Set_tanmatsuOperationCompleted = AddressOf Me.OnSet_tanmatsuOperationCompleted
            End If
            Me.InvokeAsync("Set_tanmatsu", New Object() {sUser, sKey}, Me.Set_tanmatsuOperationCompleted, userState)
        End Sub
        
        Private Sub OnSet_tanmatsuOperationCompleted(ByVal arg As Object)
            If (Not (Me.Set_tanmatsuCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Set_tanmatsuCompleted(Me, New Set_tanmatsuCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Walkthrough/XmlWebServices/Upd_tanmatsu", RequestNamespace:="http://Walkthrough/XmlWebServices/", ResponseNamespace:="http://Walkthrough/XmlWebServices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Upd_tanmatsu(ByVal sUser() As String, ByVal sKey() As String) As String
            Dim results() As Object = Me.Invoke("Upd_tanmatsu", New Object() {sUser, sKey})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginUpd_tanmatsu(ByVal sUser() As String, ByVal sKey() As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("Upd_tanmatsu", New Object() {sUser, sKey}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUpd_tanmatsu(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Upd_tanmatsuAsync(ByVal sUser() As String, ByVal sKey() As String)
            Me.Upd_tanmatsuAsync(sUser, sKey, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Upd_tanmatsuAsync(ByVal sUser() As String, ByVal sKey() As String, ByVal userState As Object)
            If (Me.Upd_tanmatsuOperationCompleted Is Nothing) Then
                Me.Upd_tanmatsuOperationCompleted = AddressOf Me.OnUpd_tanmatsuOperationCompleted
            End If
            Me.InvokeAsync("Upd_tanmatsu", New Object() {sUser, sKey}, Me.Upd_tanmatsuOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpd_tanmatsuOperationCompleted(ByVal arg As Object)
            If (Not (Me.Upd_tanmatsuCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Upd_tanmatsuCompleted(Me, New Upd_tanmatsuCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Walkthrough/XmlWebServices/Upd_riyou", RequestNamespace:="http://Walkthrough/XmlWebServices/", ResponseNamespace:="http://Walkthrough/XmlWebServices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Upd_riyou(ByVal sUser() As String, ByVal sKey() As String) As String
            Dim results() As Object = Me.Invoke("Upd_riyou", New Object() {sUser, sKey})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginUpd_riyou(ByVal sUser() As String, ByVal sKey() As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("Upd_riyou", New Object() {sUser, sKey}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUpd_riyou(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Upd_riyouAsync(ByVal sUser() As String, ByVal sKey() As String)
            Me.Upd_riyouAsync(sUser, sKey, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Upd_riyouAsync(ByVal sUser() As String, ByVal sKey() As String, ByVal userState As Object)
            If (Me.Upd_riyouOperationCompleted Is Nothing) Then
                Me.Upd_riyouOperationCompleted = AddressOf Me.OnUpd_riyouOperationCompleted
            End If
            Me.InvokeAsync("Upd_riyou", New Object() {sUser, sKey}, Me.Upd_riyouOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpd_riyouOperationCompleted(ByVal arg As Object)
            If (Not (Me.Upd_riyouCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Upd_riyouCompleted(Me, New Upd_riyouCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Walkthrough/XmlWebServices/Get_tanmatsu2", RequestNamespace:="http://Walkthrough/XmlWebServices/", ResponseNamespace:="http://Walkthrough/XmlWebServices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Get_tanmatsu2(ByVal sUser() As String, ByVal sKey1 As String) As String()
            Dim results() As Object = Me.Invoke("Get_tanmatsu2", New Object() {sUser, sKey1})
            Return CType(results(0),String())
        End Function
        
        '''<remarks/>
        Public Function BeginGet_tanmatsu2(ByVal sUser() As String, ByVal sKey1 As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("Get_tanmatsu2", New Object() {sUser, sKey1}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGet_tanmatsu2(ByVal asyncResult As System.IAsyncResult) As String()
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String())
        End Function
        
        '''<remarks/>
        Public Overloads Sub Get_tanmatsu2Async(ByVal sUser() As String, ByVal sKey1 As String)
            Me.Get_tanmatsu2Async(sUser, sKey1, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Get_tanmatsu2Async(ByVal sUser() As String, ByVal sKey1 As String, ByVal userState As Object)
            If (Me.Get_tanmatsu2OperationCompleted Is Nothing) Then
                Me.Get_tanmatsu2OperationCompleted = AddressOf Me.OnGet_tanmatsu2OperationCompleted
            End If
            Me.InvokeAsync("Get_tanmatsu2", New Object() {sUser, sKey1}, Me.Get_tanmatsu2OperationCompleted, userState)
        End Sub
        
        Private Sub OnGet_tanmatsu2OperationCompleted(ByVal arg As Object)
            If (Not (Me.Get_tanmatsu2CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Get_tanmatsu2Completed(Me, New Get_tanmatsu2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Walkthrough/XmlWebServices/Get_tanmatsu3", RequestNamespace:="http://Walkthrough/XmlWebServices/", ResponseNamespace:="http://Walkthrough/XmlWebServices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Get_tanmatsu3(ByVal sUser() As String, ByVal sKey1() As String) As String()
            Dim results() As Object = Me.Invoke("Get_tanmatsu3", New Object() {sUser, sKey1})
            Return CType(results(0),String())
        End Function
        
        '''<remarks/>
        Public Function BeginGet_tanmatsu3(ByVal sUser() As String, ByVal sKey1() As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("Get_tanmatsu3", New Object() {sUser, sKey1}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGet_tanmatsu3(ByVal asyncResult As System.IAsyncResult) As String()
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String())
        End Function
        
        '''<remarks/>
        Public Overloads Sub Get_tanmatsu3Async(ByVal sUser() As String, ByVal sKey1() As String)
            Me.Get_tanmatsu3Async(sUser, sKey1, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Get_tanmatsu3Async(ByVal sUser() As String, ByVal sKey1() As String, ByVal userState As Object)
            If (Me.Get_tanmatsu3OperationCompleted Is Nothing) Then
                Me.Get_tanmatsu3OperationCompleted = AddressOf Me.OnGet_tanmatsu3OperationCompleted
            End If
            Me.InvokeAsync("Get_tanmatsu3", New Object() {sUser, sKey1}, Me.Get_tanmatsu3OperationCompleted, userState)
        End Sub
        
        Private Sub OnGet_tanmatsu3OperationCompleted(ByVal arg As Object)
            If (Not (Me.Get_tanmatsu3CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Get_tanmatsu3Completed(Me, New Get_tanmatsu3CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Walkthrough/XmlWebServices/Get_riyou", RequestNamespace:="http://Walkthrough/XmlWebServices/", ResponseNamespace:="http://Walkthrough/XmlWebServices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Get_riyou(ByVal sUser() As String, ByVal sKey1 As String, ByVal sKey2 As String) As String()
            Dim results() As Object = Me.Invoke("Get_riyou", New Object() {sUser, sKey1, sKey2})
            Return CType(results(0),String())
        End Function
        
        '''<remarks/>
        Public Function BeginGet_riyou(ByVal sUser() As String, ByVal sKey1 As String, ByVal sKey2 As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("Get_riyou", New Object() {sUser, sKey1, sKey2}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGet_riyou(ByVal asyncResult As System.IAsyncResult) As String()
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String())
        End Function
        
        '''<remarks/>
        Public Overloads Sub Get_riyouAsync(ByVal sUser() As String, ByVal sKey1 As String, ByVal sKey2 As String)
            Me.Get_riyouAsync(sUser, sKey1, sKey2, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Get_riyouAsync(ByVal sUser() As String, ByVal sKey1 As String, ByVal sKey2 As String, ByVal userState As Object)
            If (Me.Get_riyouOperationCompleted Is Nothing) Then
                Me.Get_riyouOperationCompleted = AddressOf Me.OnGet_riyouOperationCompleted
            End If
            Me.InvokeAsync("Get_riyou", New Object() {sUser, sKey1, sKey2}, Me.Get_riyouOperationCompleted, userState)
        End Sub
        
        Private Sub OnGet_riyouOperationCompleted(ByVal arg As Object)
            If (Not (Me.Get_riyouCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Get_riyouCompleted(Me, New Get_riyouCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Walkthrough/XmlWebServices/Get_seikyu", RequestNamespace:="http://Walkthrough/XmlWebServices/", ResponseNamespace:="http://Walkthrough/XmlWebServices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Get_seikyu(ByVal sUser() As String, ByVal sKey1 As String, ByVal sKey2 As String) As String()
            Dim results() As Object = Me.Invoke("Get_seikyu", New Object() {sUser, sKey1, sKey2})
            Return CType(results(0),String())
        End Function
        
        '''<remarks/>
        Public Function BeginGet_seikyu(ByVal sUser() As String, ByVal sKey1 As String, ByVal sKey2 As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("Get_seikyu", New Object() {sUser, sKey1, sKey2}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGet_seikyu(ByVal asyncResult As System.IAsyncResult) As String()
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String())
        End Function
        
        '''<remarks/>
        Public Overloads Sub Get_seikyuAsync(ByVal sUser() As String, ByVal sKey1 As String, ByVal sKey2 As String)
            Me.Get_seikyuAsync(sUser, sKey1, sKey2, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Get_seikyuAsync(ByVal sUser() As String, ByVal sKey1 As String, ByVal sKey2 As String, ByVal userState As Object)
            If (Me.Get_seikyuOperationCompleted Is Nothing) Then
                Me.Get_seikyuOperationCompleted = AddressOf Me.OnGet_seikyuOperationCompleted
            End If
            Me.InvokeAsync("Get_seikyu", New Object() {sUser, sKey1, sKey2}, Me.Get_seikyuOperationCompleted, userState)
        End Sub
        
        Private Sub OnGet_seikyuOperationCompleted(ByVal arg As Object)
            If (Not (Me.Get_seikyuCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Get_seikyuCompleted(Me, New Get_seikyuCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Walkthrough/XmlWebServices/login", RequestNamespace:="http://Walkthrough/XmlWebServices/", ResponseNamespace:="http://Walkthrough/XmlWebServices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function login(ByVal sUser() As String, ByVal sKey() As String) As String()
            Dim results() As Object = Me.Invoke("login", New Object() {sUser, sKey})
            Return CType(results(0),String())
        End Function
        
        '''<remarks/>
        Public Function Beginlogin(ByVal sUser() As String, ByVal sKey() As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("login", New Object() {sUser, sKey}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function Endlogin(ByVal asyncResult As System.IAsyncResult) As String()
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String())
        End Function
        
        '''<remarks/>
        Public Overloads Sub loginAsync(ByVal sUser() As String, ByVal sKey() As String)
            Me.loginAsync(sUser, sKey, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub loginAsync(ByVal sUser() As String, ByVal sKey() As String, ByVal userState As Object)
            If (Me.loginOperationCompleted Is Nothing) Then
                Me.loginOperationCompleted = AddressOf Me.OnloginOperationCompleted
            End If
            Me.InvokeAsync("login", New Object() {sUser, sKey}, Me.loginOperationCompleted, userState)
        End Sub
        
        Private Sub OnloginOperationCompleted(ByVal arg As Object)
            If (Not (Me.loginCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent loginCompleted(Me, New loginCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Walkthrough/XmlWebServices/Get_jyotai", RequestNamespace:="http://Walkthrough/XmlWebServices/", ResponseNamespace:="http://Walkthrough/XmlWebServices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Get_jyotai(ByVal sUser() As String) As String()
            Dim results() As Object = Me.Invoke("Get_jyotai", New Object() {sUser})
            Return CType(results(0),String())
        End Function
        
        '''<remarks/>
        Public Function BeginGet_jyotai(ByVal sUser() As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("Get_jyotai", New Object() {sUser}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGet_jyotai(ByVal asyncResult As System.IAsyncResult) As String()
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String())
        End Function
        
        '''<remarks/>
        Public Overloads Sub Get_jyotaiAsync(ByVal sUser() As String)
            Me.Get_jyotaiAsync(sUser, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Get_jyotaiAsync(ByVal sUser() As String, ByVal userState As Object)
            If (Me.Get_jyotaiOperationCompleted Is Nothing) Then
                Me.Get_jyotaiOperationCompleted = AddressOf Me.OnGet_jyotaiOperationCompleted
            End If
            Me.InvokeAsync("Get_jyotai", New Object() {sUser}, Me.Get_jyotaiOperationCompleted, userState)
        End Sub
        
        Private Sub OnGet_jyotaiOperationCompleted(ByVal arg As Object)
            If (Not (Me.Get_jyotaiCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Get_jyotaiCompleted(Me, New Get_jyotaiCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Walkthrough/XmlWebServices/Get_syukabi", RequestNamespace:="http://Walkthrough/XmlWebServices/", ResponseNamespace:="http://Walkthrough/XmlWebServices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Get_syukabi(ByVal sUser() As String, ByVal sKey1 As String, ByVal sKey2 As String) As String()
            Dim results() As Object = Me.Invoke("Get_syukabi", New Object() {sUser, sKey1, sKey2})
            Return CType(results(0),String())
        End Function
        
        '''<remarks/>
        Public Function BeginGet_syukabi(ByVal sUser() As String, ByVal sKey1 As String, ByVal sKey2 As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("Get_syukabi", New Object() {sUser, sKey1, sKey2}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGet_syukabi(ByVal asyncResult As System.IAsyncResult) As String()
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String())
        End Function
        
        '''<remarks/>
        Public Overloads Sub Get_syukabiAsync(ByVal sUser() As String, ByVal sKey1 As String, ByVal sKey2 As String)
            Me.Get_syukabiAsync(sUser, sKey1, sKey2, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Get_syukabiAsync(ByVal sUser() As String, ByVal sKey1 As String, ByVal sKey2 As String, ByVal userState As Object)
            If (Me.Get_syukabiOperationCompleted Is Nothing) Then
                Me.Get_syukabiOperationCompleted = AddressOf Me.OnGet_syukabiOperationCompleted
            End If
            Me.InvokeAsync("Get_syukabi", New Object() {sUser, sKey1, sKey2}, Me.Get_syukabiOperationCompleted, userState)
        End Sub
        
        Private Sub OnGet_syukabiOperationCompleted(ByVal arg As Object)
            If (Not (Me.Get_syukabiCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Get_syukabiCompleted(Me, New Get_syukabiCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Walkthrough/XmlWebServices/Get_bumon", RequestNamespace:="http://Walkthrough/XmlWebServices/", ResponseNamespace:="http://Walkthrough/XmlWebServices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Get_bumon(ByVal sUser() As String, ByVal sKey1 As String) As String()
            Dim results() As Object = Me.Invoke("Get_bumon", New Object() {sUser, sKey1})
            Return CType(results(0),String())
        End Function
        
        '''<remarks/>
        Public Function BeginGet_bumon(ByVal sUser() As String, ByVal sKey1 As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("Get_bumon", New Object() {sUser, sKey1}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGet_bumon(ByVal asyncResult As System.IAsyncResult) As String()
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String())
        End Function
        
        '''<remarks/>
        Public Overloads Sub Get_bumonAsync(ByVal sUser() As String, ByVal sKey1 As String)
            Me.Get_bumonAsync(sUser, sKey1, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Get_bumonAsync(ByVal sUser() As String, ByVal sKey1 As String, ByVal userState As Object)
            If (Me.Get_bumonOperationCompleted Is Nothing) Then
                Me.Get_bumonOperationCompleted = AddressOf Me.OnGet_bumonOperationCompleted
            End If
            Me.InvokeAsync("Get_bumon", New Object() {sUser, sKey1}, Me.Get_bumonOperationCompleted, userState)
        End Sub
        
        Private Sub OnGet_bumonOperationCompleted(ByVal arg As Object)
            If (Not (Me.Get_bumonCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Get_bumonCompleted(Me, New Get_bumonCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Walkthrough/XmlWebServices/Get_message", RequestNamespace:="http://Walkthrough/XmlWebServices/", ResponseNamespace:="http://Walkthrough/XmlWebServices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Get_message(ByVal sUser() As String, ByVal sKey1 As String, ByVal sKey2 As String) As String()
            Dim results() As Object = Me.Invoke("Get_message", New Object() {sUser, sKey1, sKey2})
            Return CType(results(0),String())
        End Function
        
        '''<remarks/>
        Public Function BeginGet_message(ByVal sUser() As String, ByVal sKey1 As String, ByVal sKey2 As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("Get_message", New Object() {sUser, sKey1, sKey2}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGet_message(ByVal asyncResult As System.IAsyncResult) As String()
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String())
        End Function
        
        '''<remarks/>
        Public Overloads Sub Get_messageAsync(ByVal sUser() As String, ByVal sKey1 As String, ByVal sKey2 As String)
            Me.Get_messageAsync(sUser, sKey1, sKey2, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Get_messageAsync(ByVal sUser() As String, ByVal sKey1 As String, ByVal sKey2 As String, ByVal userState As Object)
            If (Me.Get_messageOperationCompleted Is Nothing) Then
                Me.Get_messageOperationCompleted = AddressOf Me.OnGet_messageOperationCompleted
            End If
            Me.InvokeAsync("Get_message", New Object() {sUser, sKey1, sKey2}, Me.Get_messageOperationCompleted, userState)
        End Sub
        
        Private Sub OnGet_messageOperationCompleted(ByVal arg As Object)
            If (Not (Me.Get_messageCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Get_messageCompleted(Me, New Get_messageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Walkthrough/XmlWebServices/Get_seigyo", RequestNamespace:="http://Walkthrough/XmlWebServices/", ResponseNamespace:="http://Walkthrough/XmlWebServices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Get_seigyo(ByVal sUser() As String, ByVal sKey1 As String, ByVal sKey2 As String) As String()
            Dim results() As Object = Me.Invoke("Get_seigyo", New Object() {sUser, sKey1, sKey2})
            Return CType(results(0),String())
        End Function
        
        '''<remarks/>
        Public Function BeginGet_seigyo(ByVal sUser() As String, ByVal sKey1 As String, ByVal sKey2 As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("Get_seigyo", New Object() {sUser, sKey1, sKey2}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGet_seigyo(ByVal asyncResult As System.IAsyncResult) As String()
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String())
        End Function
        
        '''<remarks/>
        Public Overloads Sub Get_seigyoAsync(ByVal sUser() As String, ByVal sKey1 As String, ByVal sKey2 As String)
            Me.Get_seigyoAsync(sUser, sKey1, sKey2, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Get_seigyoAsync(ByVal sUser() As String, ByVal sKey1 As String, ByVal sKey2 As String, ByVal userState As Object)
            If (Me.Get_seigyoOperationCompleted Is Nothing) Then
                Me.Get_seigyoOperationCompleted = AddressOf Me.OnGet_seigyoOperationCompleted
            End If
            Me.InvokeAsync("Get_seigyo", New Object() {sUser, sKey1, sKey2}, Me.Get_seigyoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGet_seigyoOperationCompleted(ByVal arg As Object)
            If (Not (Me.Get_seigyoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Get_seigyoCompleted(Me, New Get_seigyoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Walkthrough/XmlWebServices/Get_seigyo2", RequestNamespace:="http://Walkthrough/XmlWebServices/", ResponseNamespace:="http://Walkthrough/XmlWebServices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Get_seigyo2(ByVal sUser() As String, ByVal sKey1 As String, ByVal sKey2 As String, ByVal iLength As Integer) As String()
            Dim results() As Object = Me.Invoke("Get_seigyo2", New Object() {sUser, sKey1, sKey2, iLength})
            Return CType(results(0),String())
        End Function
        
        '''<remarks/>
        Public Function BeginGet_seigyo2(ByVal sUser() As String, ByVal sKey1 As String, ByVal sKey2 As String, ByVal iLength As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("Get_seigyo2", New Object() {sUser, sKey1, sKey2, iLength}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGet_seigyo2(ByVal asyncResult As System.IAsyncResult) As String()
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String())
        End Function
        
        '''<remarks/>
        Public Overloads Sub Get_seigyo2Async(ByVal sUser() As String, ByVal sKey1 As String, ByVal sKey2 As String, ByVal iLength As Integer)
            Me.Get_seigyo2Async(sUser, sKey1, sKey2, iLength, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Get_seigyo2Async(ByVal sUser() As String, ByVal sKey1 As String, ByVal sKey2 As String, ByVal iLength As Integer, ByVal userState As Object)
            If (Me.Get_seigyo2OperationCompleted Is Nothing) Then
                Me.Get_seigyo2OperationCompleted = AddressOf Me.OnGet_seigyo2OperationCompleted
            End If
            Me.InvokeAsync("Get_seigyo2", New Object() {sUser, sKey1, sKey2, iLength}, Me.Get_seigyo2OperationCompleted, userState)
        End Sub
        
        Private Sub OnGet_seigyo2OperationCompleted(ByVal arg As Object)
            If (Not (Me.Get_seigyo2CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Get_seigyo2Completed(Me, New Get_seigyo2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Walkthrough/XmlWebServices/Ins_seigyo", RequestNamespace:="http://Walkthrough/XmlWebServices/", ResponseNamespace:="http://Walkthrough/XmlWebServices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Ins_seigyo(ByVal sUser() As String, ByVal sKey() As String) As String
            Dim results() As Object = Me.Invoke("Ins_seigyo", New Object() {sUser, sKey})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginIns_seigyo(ByVal sUser() As String, ByVal sKey() As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("Ins_seigyo", New Object() {sUser, sKey}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndIns_seigyo(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Ins_seigyoAsync(ByVal sUser() As String, ByVal sKey() As String)
            Me.Ins_seigyoAsync(sUser, sKey, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Ins_seigyoAsync(ByVal sUser() As String, ByVal sKey() As String, ByVal userState As Object)
            If (Me.Ins_seigyoOperationCompleted Is Nothing) Then
                Me.Ins_seigyoOperationCompleted = AddressOf Me.OnIns_seigyoOperationCompleted
            End If
            Me.InvokeAsync("Ins_seigyo", New Object() {sUser, sKey}, Me.Ins_seigyoOperationCompleted, userState)
        End Sub
        
        Private Sub OnIns_seigyoOperationCompleted(ByVal arg As Object)
            If (Not (Me.Ins_seigyoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Ins_seigyoCompleted(Me, New Ins_seigyoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Walkthrough/XmlWebServices/Upd_seigyo", RequestNamespace:="http://Walkthrough/XmlWebServices/", ResponseNamespace:="http://Walkthrough/XmlWebServices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Upd_seigyo(ByVal sUser() As String, ByVal sKey() As String) As String
            Dim results() As Object = Me.Invoke("Upd_seigyo", New Object() {sUser, sKey})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginUpd_seigyo(ByVal sUser() As String, ByVal sKey() As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("Upd_seigyo", New Object() {sUser, sKey}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUpd_seigyo(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Upd_seigyoAsync(ByVal sUser() As String, ByVal sKey() As String)
            Me.Upd_seigyoAsync(sUser, sKey, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Upd_seigyoAsync(ByVal sUser() As String, ByVal sKey() As String, ByVal userState As Object)
            If (Me.Upd_seigyoOperationCompleted Is Nothing) Then
                Me.Upd_seigyoOperationCompleted = AddressOf Me.OnUpd_seigyoOperationCompleted
            End If
            Me.InvokeAsync("Upd_seigyo", New Object() {sUser, sKey}, Me.Upd_seigyoOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpd_seigyoOperationCompleted(ByVal arg As Object)
            If (Not (Me.Upd_seigyoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Upd_seigyoCompleted(Me, New Upd_seigyoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Walkthrough/XmlWebServices/login2", RequestNamespace:="http://Walkthrough/XmlWebServices/", ResponseNamespace:="http://Walkthrough/XmlWebServices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function login2(ByVal sUser() As String, ByVal sKey() As String) As String()
            Dim results() As Object = Me.Invoke("login2", New Object() {sUser, sKey})
            Return CType(results(0),String())
        End Function
        
        '''<remarks/>
        Public Function Beginlogin2(ByVal sUser() As String, ByVal sKey() As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("login2", New Object() {sUser, sKey}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function Endlogin2(ByVal asyncResult As System.IAsyncResult) As String()
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String())
        End Function
        
        '''<remarks/>
        Public Overloads Sub login2Async(ByVal sUser() As String, ByVal sKey() As String)
            Me.login2Async(sUser, sKey, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub login2Async(ByVal sUser() As String, ByVal sKey() As String, ByVal userState As Object)
            If (Me.login2OperationCompleted Is Nothing) Then
                Me.login2OperationCompleted = AddressOf Me.Onlogin2OperationCompleted
            End If
            Me.InvokeAsync("login2", New Object() {sUser, sKey}, Me.login2OperationCompleted, userState)
        End Sub
        
        Private Sub Onlogin2OperationCompleted(ByVal arg As Object)
            If (Not (Me.login2CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent login2Completed(Me, New login2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Walkthrough/XmlWebServices/Upd_tanmatu", RequestNamespace:="http://Walkthrough/XmlWebServices/", ResponseNamespace:="http://Walkthrough/XmlWebServices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Upd_tanmatu(ByVal sUser() As String, ByVal sKey As String) As String()
            Dim results() As Object = Me.Invoke("Upd_tanmatu", New Object() {sUser, sKey})
            Return CType(results(0),String())
        End Function
        
        '''<remarks/>
        Public Function BeginUpd_tanmatu(ByVal sUser() As String, ByVal sKey As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("Upd_tanmatu", New Object() {sUser, sKey}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUpd_tanmatu(ByVal asyncResult As System.IAsyncResult) As String()
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String())
        End Function
        
        '''<remarks/>
        Public Overloads Sub Upd_tanmatuAsync(ByVal sUser() As String, ByVal sKey As String)
            Me.Upd_tanmatuAsync(sUser, sKey, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Upd_tanmatuAsync(ByVal sUser() As String, ByVal sKey As String, ByVal userState As Object)
            If (Me.Upd_tanmatuOperationCompleted Is Nothing) Then
                Me.Upd_tanmatuOperationCompleted = AddressOf Me.OnUpd_tanmatuOperationCompleted
            End If
            Me.InvokeAsync("Upd_tanmatu", New Object() {sUser, sKey}, Me.Upd_tanmatuOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpd_tanmatuOperationCompleted(ByVal arg As Object)
            If (Not (Me.Upd_tanmatuCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Upd_tanmatuCompleted(Me, New Upd_tanmatuCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Walkthrough/XmlWebServices/login3", RequestNamespace:="http://Walkthrough/XmlWebServices/", ResponseNamespace:="http://Walkthrough/XmlWebServices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function login3(ByVal sUser() As String, ByVal sKey() As String) As String()
            Dim results() As Object = Me.Invoke("login3", New Object() {sUser, sKey})
            Return CType(results(0),String())
        End Function
        
        '''<remarks/>
        Public Function Beginlogin3(ByVal sUser() As String, ByVal sKey() As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("login3", New Object() {sUser, sKey}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function Endlogin3(ByVal asyncResult As System.IAsyncResult) As String()
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String())
        End Function
        
        '''<remarks/>
        Public Overloads Sub login3Async(ByVal sUser() As String, ByVal sKey() As String)
            Me.login3Async(sUser, sKey, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub login3Async(ByVal sUser() As String, ByVal sKey() As String, ByVal userState As Object)
            If (Me.login3OperationCompleted Is Nothing) Then
                Me.login3OperationCompleted = AddressOf Me.Onlogin3OperationCompleted
            End If
            Me.InvokeAsync("login3", New Object() {sUser, sKey}, Me.login3OperationCompleted, userState)
        End Sub
        
        Private Sub Onlogin3OperationCompleted(ByVal arg As Object)
            If (Not (Me.login3CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent login3Completed(Me, New login3CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Walkthrough/XmlWebServices/Get_hatuten3", RequestNamespace:="http://Walkthrough/XmlWebServices/", ResponseNamespace:="http://Walkthrough/XmlWebServices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Get_hatuten3(ByVal sUser() As String, ByVal sKcode As String, ByVal sBcode As String) As String()
            Dim results() As Object = Me.Invoke("Get_hatuten3", New Object() {sUser, sKcode, sBcode})
            Return CType(results(0),String())
        End Function
        
        '''<remarks/>
        Public Function BeginGet_hatuten3(ByVal sUser() As String, ByVal sKcode As String, ByVal sBcode As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("Get_hatuten3", New Object() {sUser, sKcode, sBcode}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGet_hatuten3(ByVal asyncResult As System.IAsyncResult) As String()
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String())
        End Function
        
        '''<remarks/>
        Public Overloads Sub Get_hatuten3Async(ByVal sUser() As String, ByVal sKcode As String, ByVal sBcode As String)
            Me.Get_hatuten3Async(sUser, sKcode, sBcode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Get_hatuten3Async(ByVal sUser() As String, ByVal sKcode As String, ByVal sBcode As String, ByVal userState As Object)
            If (Me.Get_hatuten3OperationCompleted Is Nothing) Then
                Me.Get_hatuten3OperationCompleted = AddressOf Me.OnGet_hatuten3OperationCompleted
            End If
            Me.InvokeAsync("Get_hatuten3", New Object() {sUser, sKcode, sBcode}, Me.Get_hatuten3OperationCompleted, userState)
        End Sub
        
        Private Sub OnGet_hatuten3OperationCompleted(ByVal arg As Object)
            If (Not (Me.Get_hatuten3CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Get_hatuten3Completed(Me, New Get_hatuten3CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Walkthrough/XmlWebServices/Get_Kadobi", RequestNamespace:="http://Walkthrough/XmlWebServices/", ResponseNamespace:="http://Walkthrough/XmlWebServices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Get_Kadobi(ByVal sUser() As String, ByVal sDateStart As String, ByVal sDateEnd As String) As String()
            Dim results() As Object = Me.Invoke("Get_Kadobi", New Object() {sUser, sDateStart, sDateEnd})
            Return CType(results(0),String())
        End Function
        
        '''<remarks/>
        Public Function BeginGet_Kadobi(ByVal sUser() As String, ByVal sDateStart As String, ByVal sDateEnd As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("Get_Kadobi", New Object() {sUser, sDateStart, sDateEnd}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGet_Kadobi(ByVal asyncResult As System.IAsyncResult) As String()
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String())
        End Function
        
        '''<remarks/>
        Public Overloads Sub Get_KadobiAsync(ByVal sUser() As String, ByVal sDateStart As String, ByVal sDateEnd As String)
            Me.Get_KadobiAsync(sUser, sDateStart, sDateEnd, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Get_KadobiAsync(ByVal sUser() As String, ByVal sDateStart As String, ByVal sDateEnd As String, ByVal userState As Object)
            If (Me.Get_KadobiOperationCompleted Is Nothing) Then
                Me.Get_KadobiOperationCompleted = AddressOf Me.OnGet_KadobiOperationCompleted
            End If
            Me.InvokeAsync("Get_Kadobi", New Object() {sUser, sDateStart, sDateEnd}, Me.Get_KadobiOperationCompleted, userState)
        End Sub
        
        Private Sub OnGet_KadobiOperationCompleted(ByVal arg As Object)
            If (Not (Me.Get_KadobiCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Get_KadobiCompleted(Me, New Get_KadobiCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Walkthrough/XmlWebServices/wakeupDB", RequestNamespace:="http://Walkthrough/XmlWebServices/", ResponseNamespace:="http://Walkthrough/XmlWebServices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function wakeupDB() As String
            Dim results() As Object = Me.Invoke("wakeupDB", New Object(-1) {})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginwakeupDB(ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("wakeupDB", New Object(-1) {}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndwakeupDB(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub wakeupDBAsync()
            Me.wakeupDBAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub wakeupDBAsync(ByVal userState As Object)
            If (Me.wakeupDBOperationCompleted Is Nothing) Then
                Me.wakeupDBOperationCompleted = AddressOf Me.OnwakeupDBOperationCompleted
            End If
            Me.InvokeAsync("wakeupDB", New Object(-1) {}, Me.wakeupDBOperationCompleted, userState)
        End Sub
        
        Private Sub OnwakeupDBOperationCompleted(ByVal arg As Object)
            If (Not (Me.wakeupDBCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent wakeupDBCompleted(Me, New wakeupDBCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")>  _
    Public Delegate Sub Set_tanmatsuCompletedEventHandler(ByVal sender As Object, ByVal e As Set_tanmatsuCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Set_tanmatsuCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")>  _
    Public Delegate Sub Upd_tanmatsuCompletedEventHandler(ByVal sender As Object, ByVal e As Upd_tanmatsuCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Upd_tanmatsuCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")>  _
    Public Delegate Sub Upd_riyouCompletedEventHandler(ByVal sender As Object, ByVal e As Upd_riyouCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Upd_riyouCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")>  _
    Public Delegate Sub Get_tanmatsu2CompletedEventHandler(ByVal sender As Object, ByVal e As Get_tanmatsu2CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Get_tanmatsu2CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")>  _
    Public Delegate Sub Get_tanmatsu3CompletedEventHandler(ByVal sender As Object, ByVal e As Get_tanmatsu3CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Get_tanmatsu3CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")>  _
    Public Delegate Sub Get_riyouCompletedEventHandler(ByVal sender As Object, ByVal e As Get_riyouCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Get_riyouCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")>  _
    Public Delegate Sub Get_seikyuCompletedEventHandler(ByVal sender As Object, ByVal e As Get_seikyuCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Get_seikyuCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")>  _
    Public Delegate Sub loginCompletedEventHandler(ByVal sender As Object, ByVal e As loginCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class loginCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")>  _
    Public Delegate Sub Get_jyotaiCompletedEventHandler(ByVal sender As Object, ByVal e As Get_jyotaiCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Get_jyotaiCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")>  _
    Public Delegate Sub Get_syukabiCompletedEventHandler(ByVal sender As Object, ByVal e As Get_syukabiCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Get_syukabiCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")>  _
    Public Delegate Sub Get_bumonCompletedEventHandler(ByVal sender As Object, ByVal e As Get_bumonCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Get_bumonCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")>  _
    Public Delegate Sub Get_messageCompletedEventHandler(ByVal sender As Object, ByVal e As Get_messageCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Get_messageCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")>  _
    Public Delegate Sub Get_seigyoCompletedEventHandler(ByVal sender As Object, ByVal e As Get_seigyoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Get_seigyoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")>  _
    Public Delegate Sub Get_seigyo2CompletedEventHandler(ByVal sender As Object, ByVal e As Get_seigyo2CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Get_seigyo2CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")>  _
    Public Delegate Sub Ins_seigyoCompletedEventHandler(ByVal sender As Object, ByVal e As Ins_seigyoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Ins_seigyoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")>  _
    Public Delegate Sub Upd_seigyoCompletedEventHandler(ByVal sender As Object, ByVal e As Upd_seigyoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Upd_seigyoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")>  _
    Public Delegate Sub login2CompletedEventHandler(ByVal sender As Object, ByVal e As login2CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class login2CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")>  _
    Public Delegate Sub Upd_tanmatuCompletedEventHandler(ByVal sender As Object, ByVal e As Upd_tanmatuCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Upd_tanmatuCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")>  _
    Public Delegate Sub login3CompletedEventHandler(ByVal sender As Object, ByVal e As login3CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class login3CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")>  _
    Public Delegate Sub Get_hatuten3CompletedEventHandler(ByVal sender As Object, ByVal e As Get_hatuten3CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Get_hatuten3CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")>  _
    Public Delegate Sub Get_KadobiCompletedEventHandler(ByVal sender As Object, ByVal e As Get_KadobiCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Get_KadobiCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")>  _
    Public Delegate Sub wakeupDBCompletedEventHandler(ByVal sender As Object, ByVal e As wakeupDBCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class wakeupDBCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
End Namespace
